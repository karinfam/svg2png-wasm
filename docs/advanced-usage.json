{"body":"## Initialize only once\n\nThe `initialize` function can be called only once.\n\nIf it is called more than once, `Promise` will be rejected.\n\n## Initialize without buffer\n\nThe argument of the `initialize` function can be something other than a buffer.\n\n### Types\n\n```js\nexport type InitInput =\n  | RequestInfo\n  | URL\n  | Response\n  | BufferSource\n  | WebAssembly.Module;\nexport const initialize: (mod: Promise<InitInput> | InitInput) => Promise<void>;\n```\n\n### Examples\n\n```js\n// full code (WebAsembly.Module)\nconst response = await fetch(\n  'https://unpkg.com/svg2png-wasm/svg2png_wasm_bg.wasm',\n);\nconst buffer = await response.arrayBuffer();\nconst { module } = await WebAssembly.instantiate(buffer);\nawait initialize(module);\n\n// BufferSource\nconst response = await fetch(\n  'https://unpkg.com/svg2png-wasm/svg2png_wasm_bg.wasm',\n);\nconst buffer = await response.arrayBuffer();\nawait initialize(buffer);\n\n// Response\nconst response = await fetch(\n  'https://unpkg.com/svg2png-wasm/svg2png_wasm_bg.wasm',\n);\nawait initialize(response);\n\n// Promise<Response>\nawait initialize(fetch('https://unpkg.com/svg2png-wasm/svg2png_wasm_bg.wasm'));\n\n// in Deno (Promise<BufferSource>)\nawait initialize(Deno.readFile('./svg2png_wasm_bg.wasm'));\n\n// in Deno and Browser (RequestInfo (=string/URL))\nawait initialize('https://unpkg.com/svg2png-wasm/svg2png_wasm_bg.wasm');\n```\n\n## Convert options\n\nThe output image can be adjusted by specifying an option as the second argument of the function `svg2png`.\n\n### Size option\n\nYou can specify output image size.\n\nSpecifying the width and height will not stretch the image.\n\n```js\n// 2x scale\nawait svg2png(svgData, { scale: 2 });\n\n// Fit to 500px width\nawait svg2png(svgData, { width: 500 });\n\n// Fit to 128px height\nawait svg2png(svgData, { height: 128 });\n\n// Fit to 300px width (width and height have priority)\nawait svg2png(svgData, { width: 300, scale: 10 });\n```\n\n### Background color option\n\nYou can specify background color of the output image when the SVG is transparent.\n\n```js\n// Compatible with CSS Color Module 3\n// with color keyword\nawait svg2png(svgData, { backgroundColor: 'lightskyblue' });\n\n// with hex values\nawait svg2png(svgData, { backgroundColor: '#3cf' });\n\n// with hsla\nawait svg2png(svgData, { backgroundColor: 'hsla(240, 100%, 50%, 0.5)' });\n```\n\n## Custom svg2png\n\nYou can create a custom svg2png function.\n\nBasically, you can use `svg2png` , but if you want to process a lot of data continuously, consider using `createSvg2png` . It can reduce the overhead of font loading. Converters generated by `createSvg2png` should be disposed of after use by calling the dispose method.\n\n```js\nconst svgs = [\n  '<svg viewBox=\"0 0 200 200\" xmlns=\"http://www.w3.org/2000/svg\"> ... </svg>',\n  '<svg viewBox=\"0 0 200 200\" xmlns=\"http://www.w3.org/2000/svg\"> ... </svg>',\n  '<svg viewBox=\"0 0 200 200\" xmlns=\"http://www.w3.org/2000/svg\"> ... </svg>',\n  // and more ...\n];\nconst font = await fetch('./Roboto.ttf').then((res) => res.arrayBuffer());\nconst svg2png = createSvg2png({\n  fonts: [new Uint8Array(font)],\n});\n\nconst pngs = await Promise.all(svgs.map((svg) => svg2png(svg, { scale: 2 })));\nsvg2png.dispose(); // You should dispose svg2png, if you will not use it in the future\n```\n","metadata":{"slug":"advanced-usage","title":"Advanced usage"}}